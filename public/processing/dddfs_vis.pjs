// Config
Size canvasSize = new Size(800, 800);
Size nodeSize = new Size(10, 20);
Size nodeGapSize = new Size(2, 3);


// Classes
class Size {
    int width, height;
    Size(int _width, int _height) {
        width = _width;
        height = _height;
    }
}

class Pos {
    int x, y;
    Pos(int _x, int _y) {
        x = _x;
        y = _y;
    }
}

class File {
    String name;

    // State
    boolean replicating, removing;

    // Current position
    Pos curPos;
    String curCluster;  // null on replicating
    int curLocalId;     // null on replicating

    // property for when making replica
    String srcCluster, destCluster;
    int srcLocalId, destLocalId;

    // Constructor for replica
    File(String _name,
         String _srcCluster, int _srcLocalId,
         String _destCluster, int _destLocalId) {
        replicating = true;
        removing = false;

        name = _name;
        srcCluster = _srcCluster;
        srcLocalId = _srcLocalId;
        destCluster = _destCluster;
        destLocalId = _destLocalId;
        curPos = getNodePos(srcCluster, srcLocalId);
    }

    // Constructor for static file
    File(String _name,
         String _curCluster, int _curLocalId) {
        replicating = false;
        removing = false;

        name = _name;
        curCluster = _curCluster;
        curLocalId = _curLocalId;
        curPos = getNodePos(curCluster, curLocalId);
    }

    // This function is supposed to be called every frame
    void update() {
        if (removing && replicating) {
            // Assertion failed
            triangle(30, 75, 58, 20, 86, 75);
            exit();
        }
        if (removing) {
        }
        if (replicating) {
            // if curPos reach to dest
        }
    }

    boolean remove() {
        if (replicating) {
            return false;
        }
        removing = true;
    }
}


// Main functions (setup/draw)
void setup() {
    size(canvasSize.width, canvasSize.height);
    frameRate(24);
    background(0xffffff);
    // noFill();
    stroke(0x000000, 100);
}
void draw() {
    // background(0xffffff);
    drawClusters();
    drawFiles();
}


// Draw functions
// They are supposed to be called every frame
void drawClusters() {
    for (var clusterName in clusterGeo) {
        var c = clusterGeo[clusterName];
        for (var iVertical = 0; iVertical <= c['maxVerticalNum']; iVertical++) {
            for (var iHorizontal = 0; iHorizontal <= c['maxHorizontalNum']; iHorizontal++) {
                Pos nodePos = getNodePos(clusterName, iVertical*100 + iHorizontal);
                rect(nodePos.x, nodePos.y,
                     nodeSize.width, nodeSize.height);
            }
        }
    }
}

void drawFiles() {
    
}

/*
@parameter
clusterName: 'huscs'
localId: 1 (for '001')

@returns
Pos object
*/
Pos getNodePos(clusterName, localId) {
    String c = clusterGeo[clusterName];
    Pos centerOfCluster = new Pos(c["maxHorizontalNum"] / 2,
                                  c["maxVerticalNum"] / 2);
    return new Pos(
        canvasSize.width * c['posX'] + (localId%100 - centerOfCluster.x) * (nodeSize.width + nodeGapSize.width),
        canvasSize.height * c['posY'] + (int(localId/100) - centerOfCluster.y) * (nodeSize.height + nodeGapSize.height)
    );
};
