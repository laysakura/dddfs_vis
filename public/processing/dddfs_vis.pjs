int canvasWidth = 800;
int canvasHeight = 800;
int nodeWidth = 10;
int nodeHeight = 20;
int nodeGapWidth = 2;
int nodeGapHeight = 3;


void setup() {
    size(canvasWidth, canvasHeight);
    frameRate(24);
    background(0xffffff);
    // noFill();
    // stroke(0x000000, 100);
}

void draw() {
    background(0xffffff);
    drawClusters();
}

void drawClusters() {
    for (var clusterName in clusterGeo) {
        var c = clusterGeo[clusterName];
        for (var iVertical = 0; iVertical <= c['maxVerticalNum']; iVertical++) {
            for (var iHorizontal = 0; iHorizontal <= c['maxHorizontalNum']; iHorizontal++) {
                HashMap nodePos = getNodePos(clusterName, iVertical*100 + iHorizontal);
                rect(nodePos.get("x"),
                     nodePos.get("y"),
                     nodeWidth, nodeHeight);
            }
        }
    }
}

/*
@parameter
clusterName: 'huscs'
localId: 1 (for '001')

@returns
{x: 30, y: 50}
*/
HashMap getNodePos(clusterName, localId) {
    String c = clusterGeo[clusterName];
    int horizontalCenter = c["maxHorizontalNum"] / 2;
    int verticalCenter = c["maxVerticalNum"] / 2;
    HashMap ret = new HashMap();
    ret.put("x",
            canvasWidth * c['posX'] + (localId%100 - horizontalCenter) * (nodeWidth + nodeGapWidth));
    ret.put("y",
            canvasHeight * c['posY'] + (int(localId/100) - verticalCenter) * (nodeHeight + nodeGapHeight));
    return ret;
};
