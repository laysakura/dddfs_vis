// Config
Size canvasSize = new Size(1000, 700);
Size nodeSize = new Size(15, 30);
Size nodeGapSize = new Size(2, 3);
Size fileSize = new Size(10, 10);
float replSpeed = 10.0;
float brightSpeed = 10;
float fadeoutSpeed = 10;
colorMode(RGB, 255);
color strokeColor = color(0, 0, 0, 0);
color backgroundColor = color(150, 200, 255);
color nodeColor = color(255, 255, 255);
color disabledNodeColor = color(128, 128, 128);
color traceAColor = color(255, 128, 128, 255);
color traceBColor = color(128, 255, 128, 255);
color traceCColor = color(128, 128, 255, 255);
color replBrightColor = color(255, 255, 64);
color busyNodeColor = color(255, 128, 64);
color busyReplicaColor = color(255, 0, 0);
color freeReplicaColor = color(0, 0, 255);


// Global variables
ArrayList fileList = new ArrayList();


// Classes
class Size {
    int width, height;
    Size(int _width, int _height) {
        width = _width;
        height = _height;
    }
}


class Pos {
    int x, y;
    Pos(int _x, int _y) {
        x = _x;
        y = _y;
    }
}

class File {
    String name;

    // State
    boolean replicationStarting, replicating, removing;

    // brightness (0-255)
    int brightness;

    // Current position
    Pos curPos;
    String curCluster;  // null on replicating
    int curLocalId;     // null on replicating

    // property for when making replica
    Pos srcPos;
    String srcCluster;
    int srcLocalId;
    Pos destPos;
    String destCluster;
    int destLocalId;

    // Connection count
    int prevNumConn = -1;
    boolean numConnIncreasing, numConnDecreasing;
    int brightnessOnNumConnChanging;

    // Constructor for replica
    File(String _name,
         String _srcCluster, int _srcLocalId,
         String _destCluster, int _destLocalId) {
        replicationStarting = true;
        replicating = false;
        removing = false;
        numConnIncreasing = false;
        numConnDecreasing = false;
        prevNumConn = -2;

        brightness = 0;
        brightnessOnNumConnIncreasing = 0;
        brightnessOnNumConnDecreasing = 0;

        name = _name;
        curCluster = null;
        curLocalId = -1;
        srcCluster = _srcCluster;
        srcLocalId = _srcLocalId;
        destCluster = _destCluster;
        destLocalId = _destLocalId;

        srcPos = getNodePos(srcCluster, srcLocalId);
        srcPos.x += int(nodeSize.width / 2);
        srcPos.y += int(nodeSize.height / 2);
        if (name.charAt(name.length() - 1) == "A") {
            srcPos.y -= int(nodeSize.height / 3);
        } else if (name.charAt(name.length() - 1) == "B") {
        } else if (name.charAt(name.length() - 1) == "C") {
            srcPos.y += int(nodeSize.height / 3);
        }

        curPos = srcPos;

        destPos = getNodePos(destCluster, destLocalId);
        destPos.x += int(nodeSize.width / 2);
        destPos.y += int(nodeSize.height / 2);
        if (name.charAt(name.length() - 1) == "A") {
            destPos.y -= int(nodeSize.height / 3);
        } else if (name.charAt(name.length() - 1) == "B") {
        } else if (name.charAt(name.length() - 1) == "C") {
            destPos.y += int(nodeSize.height / 3);
        }
    }

    // Constructor for static file
    File(String _name,
         String _curCluster, int _curLocalId) {
        replicationStarting = false;
        replicating = false;
        removing = false;
        numConnChanging = false
        prevNumConn == -1;

        brightness = 0;
        brightnessOnNumConnIncreasing = 0;
        brightnessOnNumConnDecreasing = 0;

        name = _name;

        curCluster = _curCluster;
        curLocalId = _curLocalId;
        srcCluster = null;
        srcLocalId = -1;
        destCluster = null;
        destLocalId = -1;

        curPos = getNodePos(curCluster, curLocalId);
        curPos.x += int(nodeSize.width / 2);
        curPos.y += int(nodeSize.height / 2);
        if (name.charAt(name.length() - 1) == "A") {
            curPos.y -= int(nodeSize.height / 3);
        } else if (name.charAt(name.length() - 1) == "B") {
        } else if (name.charAt(name.length() - 1) == "C") {
            curPos.y += int(nodeSize.height / 3);
        }

        srcPos = null;
        destPos = null;
    }

    // This function is supposed to be called every frame
    void updateAndDraw() {
        if (removing && replicating) {
            // Assertion failed
            triangle(30, 75, 58, 20, 86, 75);
            exit();
        }
        // Removing cannot be supported since
        // files are eliminated from fileList
        // soon after action=rm is digested
        // else if (removing) {
        // }
        else if (numConnIncreasing) {
            brightness = 0;
            brightnessOnNumConnDecreasing = 0;
            numConnDecreasing = false;

            // Flush the file
            if (0 <= brightnessOnNumConnIncreasing && brightnessOnNumConnIncreasing <= 255) {
                brightnessOnNumConnIncreasing += brightSpeed;
                // Draw start position
                fill(getColorForFile(name));
                stroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width, fileSize.height);
                // Draw brightness
                fill(busyReplicaColor, brightnessOnNumConnIncreasing);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else if (255 < brightnessOnNumConnIncreasing) {
                brightness = 0;
                brightnessOnNumConnIncreasing = 0;
                brightnessOnNumConnDecreasing = 0;
                numConnIncreasing = false;

                fill(backgroundColor);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else {
                println("Brightness assertion failed!");
            }
        }
        else if (numConnDecreasing) {
            brightness = 0;
            brightnessOnNumConnIncreasing = 0;
            numConnIncreasing = false;

            // Flush the file
            if (0 <= brightnessOnNumConnDecreasing && brightnessOnNumConnDecreasing <= 255) {
                brightnessOnNumConnDecreasing += brightSpeed;
                // Draw start position
                fill(getColorForFile(name));
                stroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width, fileSize.height);
                // Draw brightness
                fill(freeReplicaColor, brightnessOnNumConnDecreasing);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else if (255 < brightnessOnNumConnDecreasing) {
                brightness = 0;
                brightnessOnNumConnIncreasing = 0;
                brightnessOnNumConnDecreasing = 0;
                numConnDecreasing = false;

                fill(backgroundColor);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else {
                println("Brightness assertion failed!");
            }
        }
        else if (replicationStarting) {
            // Flush the file
            if (0 <= brightness && brightness <= 255) {
                brightness += brightSpeed;
                // Draw start position
                fill(getColorForFile(name));
                stroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width, fileSize.height);
                // Draw brightness
                fill(replBrightColor, brightness);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else if (255 < brightness) {
                brightness = 0;
                brightnessOnNumConnIncreasing = 0;
                brightnessOnNumConnDecreasing = 0;
                replicationStarting = false;
                replicating = true;

                fill(backgroundColor);
                noStroke(strokeColor);
                ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            } else {
                println("Brightness assertion failed!");
            }
        }
        else if (replicating) {
            // Overwrite previous position
            fill(backgroundColor);;
            noStroke();
            ellipse(curPos.x, curPos.y, fileSize.width + 3, fileSize.height + 3);
            stroke(strokeColor);

            float norm = distance(destPos, srcPos);
            curPos.x += float(destPos.x - srcPos.x) * replSpeed / norm;
            curPos.y += float(destPos.y - srcPos.y) * replSpeed / norm;
            // When curPos overruns destPos
            if (distance(destPos, curPos) <= replSpeed) {
                curCluster = destCluster;
                curLocalId = destLocalId;
                destCluster = srcCluster = null;
                destLocalId = srcLocalId = null;
                curPos = destPos;
                srcPos = destPos = null;
                replicating = false;
            }
            // Draw new position
            stroke(strokeColor);
            fill(getColorForFile(name));
            ellipse(curPos.x, curPos.y, fileSize.width, fileSize.height);
        }
        else {
            stroke(strokeColor);
            fill(getColorForFile(name));
            ellipse(curPos.x, curPos.y, fileSize.width, fileSize.height);
        }
    }

    void tellNumConn(int numConn) {
        if (prevNumConn > numConn) {
            // println('hetta');
            numConnDecreasing = true;
        }
        else if (prevNumConn < numConn && prevNumConn >= 0) {
            // println('prevNumConn=' + prevNumConn + ', numConn=' + numConn);
            numConnIncreasing = true;
        }
        prevNumConn = numConn;
    }

    boolean remove() {
        if (replicating) {
            return false;
        }
        removing = true;
        return true;
    }
}


// Main functions (setup/draw)
void setup() {
    size(canvasSize.width, canvasSize.height);
    frameRate(24);
    background(backgroundColor);
    stroke(strokeColor);
}
void draw() {
    // PImage img; // PImage for preloading
    // PImage part; // PImage for display
    // img = requestImage("/japan_map.png"); // accepted formats are .jpg, .gif, and .png
    // part = img.get(); // get all pixels from the image
    // image(part, 20, 20); // display the image at x, y coordinates

    // background(backgroundColor);
    // initialize fileList only 1 time in browser

    if (readyToInitFileList == true) {
        initializeFileList();
        readyToInitFileList = false;
    }
    updateFileList();
    if (iptableReady == true && clusterGeoReady == true) {
        drawClusters();
    }
    drawFiles();
}


// File list update
void initializeFileList() {
    for (var tracedFileName in mdInfo) {
        var tracedFileContents = mdInfo[tracedFileName];
        tracedFileContents.split('\n').map(function(line) {
            var mdInfoHash = mdInfoLine2mdInfoHash(line);
            if (mdInfoHash != undefined) {
                var ip = mdInfoHash['ip'];
                fileList.add(new File(tracedFileName,
                                      iptable[ip]['cluster'],
                                      iptable[ip]['localId']));
            }
        });
    }
}
// Process movement requests
void updateFileList() {
    fill(backgroundColor);
    rect(0, 0, 30, 30);
    fill(0);
    text(fileList.size(), 10, 10);
    for (var i = 0; i < mvmntReqQ.length; i++) {
        var mvmntReq = mvmntReqQ.pop();
        if (mvmntReq['action'] == 'repl') {
            fileList.add(new File(mvmntReq['name'],
                                  mvmntReq['srcCluster'], mvmntReq['srcLocalId'],
                                  mvmntReq['destCluster'], mvmntReq['destLocalId']));
        }
        else if (mvmntReq['action'] == 'rm') {
            for (int i = 0; i < fileList.size(); i++) {
                if (fileList.get(i).name == mvmntReq['name'] &&
                    fileList.get(i).curCluster == mvmntReq['cluster'] &&
                    fileList.get(i).curLocalId == mvmntReq['localId']) {
                    if (fileList.get(i).remove()) {
                        fileList.remove(i);
                    }
                    break;
                }
            }
        }
    }
}


// Draw functions
// They are supposed to be called every frame
void drawClusters() {
    // Draw clusters which exists in iptable
    stroke(strokeColor);
    for (var ip in iptable) {
        var visibility = iptable[ip]['visibility'];
        if (visibility == 'invisible') {
            continue;
        }

        var cluster = iptable[ip]['cluster'];
        var localId = parseInt(iptable[ip]['localId']);
        if (cluster.length > 0) {
            Pos nodePos = getNodePos(cluster, localId);
        }

        if (visibility == 'disabled') {
            fill(disabledNodeColor);
            rect(nodePos.x, nodePos.y,
                 nodeSize.width, nodeSize.height);
        }
        else {
            var access = getNumAccessOfNode(ip);
            fill(nodeColor);
            rect(nodePos.x, nodePos.y,
                 nodeSize.width, nodeSize.height);
            fill(color(busyNodeColor, 255 * access / 5));
            rect(nodePos.x, nodePos.y,
                 nodeSize.width, nodeSize.height);
        }
    }
}

void drawFiles() {
    for (int i = 0; i < fileList.size(); i++) {
        fill(backgroundColor);
        noStroke(strokeColor);
        ellipse(fileList.get(i).curPos.x, fileList.get(i).curPos.y, fileSize.width + 3, fileSize.height + 3);

        String fname = fileList.get(i).name;

        if (fileList.get(i).replicating == false) {

            // debug
            // if (fileList.get(i).curCluster == null || fileList.get(i).curCluster == "") {
            //     println(fname + ":" + fileList.get(i).curCluster + fileList.get(i).localId);
            // }


            String ip = node2ip(fileList.get(i).curCluster, fileList.get(i).curLocalId);
            int numConn = getNumAccessOfReplica(fname, ip);
            if (abs(numConn - fileList.get(i).prevNumConn) > 0 || fileList.get(i).prevNumConn < 0) {
                fileList.get(i).tellNumConn(numConn);
            }
        }

        fileList.get(i).updateAndDraw();
    }
}

float distance(Pos a, Pos b) {
    return sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));
}

/*
@parameter
clusterName: 'huscs'
localId: 1 (for '001')

@returns
Pos object
*/
Pos getNodePos(clusterName, localId) {
    String c = clusterGeo[clusterName];
    Pos centerOfCluster = new Pos(c["maxHorizontalNum"] / 2,
                                  c["maxVerticalNum"] / 2);
    return new Pos(
        canvasSize.width * c['posX'] + (localId%100 - centerOfCluster.x) * (nodeSize.width + nodeGapSize.width),
        canvasSize.height * c['posY'] + (int(localId/100) - centerOfCluster.y) * (nodeSize.height + nodeGapSize.height)
    );
};

int encodeStr(String s) {
    if (s.charAt(s.length() - 1) == "A") return 1;
    else if (s.charAt(s.length() - 1) == "B") return 2;
    else if (s.charAt(s.length() - 1) == "C") return 3;
    else println("Unexpected trace file name!!");
}

color getColorForFile(String fileName) {
    int code = encodeStr(fileName);
    if (code == 1) return traceAColor;       // traceA -> Red
    else if (code == 2) return traceBColor;  // traceB -> Green
    else if (code == 3) return traceCColor;  // traceC -> Blue
}
