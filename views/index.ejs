<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/processing-1.3.6.min.js"></script>
<script src="/javascripts/metadata.client.js"></script>
<script type="text/javascript">
var socket = io.connect('http://localhost:11111');
socket.on('connect', function(msg) {
  console.log("connet");
  // document.getElementById("connectId").innerHTML = 
  //   "あなたの接続ID::" + socket.socket.transport.sessid;
  // document.getElementById("type").innerHTML = 
  //   "接続方式::" + socket.socket.transport.name;
});

// ----------------------
// Utility functions
function debugPerSec() {
    // log(node2ip("huscs", "001"));  // OK
    // log(node2ip("huscs", "001"));  // OK
    // log(parseInt("001"));  // 1
    // log(parseInt(1));  // 1
    // [].map(function(){}); // OK
    // log(getNumAccessOfReplica('traceA', '192.34.9.120'));
}


function node2ip(cluster, localId) {
    for (var ip in iptable) {
        if (iptable[ip]['cluster'] == cluster &&
            parseInt(iptable[ip]['localId']) == parseInt(localId)) {
            return ip;
        }
    }
    log("Invalid node -> ip");
}


function getNumAccessOfNode(ip) {
    if (replConn.length == 0) return 0;

    var ret = 0;
    replConn.map(function(record) {
        if (record['ip'] == ip) {
            ret += record['nConn'];
        }
    });
    return ret;
}


function getNumAccessOfReplica(fname, ip) {
    if (replConn.length == 0) return 0;

    var ret = 0;
    replConn.map(function(record) {
        if (record['file'] == fname && record['ip'] == ip) {
            ret = record['nConn'];
        }
    });
    return ret;
}

var getNewMvmnt = function(newMdInfo, mdInfo) {
    var newMvmnt = [];

    // TODO: Compare the length of mdInfo and newMdInfo
    //       It's possible traced files are newly created
    //       or unlinked from metadata completely.

    for (var fileName in mdInfo) {
        var newMdInfoLines = newMdInfo[fileName].split('\n');
        var mdInfoLines = mdInfo[fileName].split('\n');

        // When need to remove (from 1 data node).
        // It is when lines in the mdInfo[fileName] are deleted
        if (newMdInfoLines.length < mdInfoLines.length) {
            mdInfoLines.map(function(mdInfoLine) {
                var isMdInfoLineContained = false;
                for (var i = 0; i < newMdInfoLines.length; i++) {
                    if (mdInfoLine == newMdInfoLines[i]) {
                        isMdInfoLineContained = true;
                    }
                }
                if (isMdInfoLineContained == false) {
                    var rmMdInfoHash = mdInfoLine2mdInfoHash(mdInfoLine);
                    if (rmMdInfoHash != undefined) {
                        var ip = rmMdInfoHash['ip'];
                        newMvmnt.push(
                            {action: 'rm', name: fileName,
                             cluster: iptable[ip]['cluster'],
                             localId: iptable[ip]['localId'],
                            }
                        );
                    }
                }
            });
        }
        // When need to make replication.
        // It is when lines in the mdInfo[fileName] are inserted
        if (newMdInfoLines.length > mdInfoLines.length) {
            newMdInfoLines.map(function(newMdInfoLine) {
                var isNewMdInfoLineContained = false;
                for (var i = 0; i < mdInfoLines.length; i++) {
                    if (newMdInfoLine == mdInfoLines[i]) {
                        isNewMdInfoLineContained = true;
                    }
                }
                if (isNewMdInfoLineContained == false) {
                    var replMdInfoHash = mdInfoLine2mdInfoHash(newMdInfoLine);
                    if (replMdInfoHash != undefined) {
                        var replSrcIp = replMdInfoHash['replSrcIp'];
                        var replDestIp = replMdInfoHash['ip'];
                        newMvmnt.push(
                            {action: 'repl', name: fileName,
                             srcCluster: iptable[replSrcIp]['cluster'],
                             srcLocalId: iptable[replSrcIp]['localId'],
                             destCluster: iptable[replDestIp]['cluster'],
                             destLocalId: iptable[replDestIp]['localId'],
                            }
                        );
                    }
                }
            });
        }
    }
    return newMvmnt;
};


// Start-up
var log = function() {};
var iptableReady = false;
var clusterGeoReady = false;
var readyToInitFileList = false;
var readyToReqNewMdInfo = false;
var iptable = {};
var clusterGeo = {};
var mdInfo = {};
var mvmntReqQ = [];
var replConn = [];
window.onload = function() {
    // Define log() function
    log = function() {
        console.log(arguments);
        document.getElementById("receiveMsg").innerHTML+=arguments[0]+"<br />";
    };

    // Send inital message to the server
    // The order must be:
    // 1. iptable
    // 2. cluster geo
    // 3. md info init
    socket.emit('req iptable', {});
}
socket.on('iptable', function(_iptable) {
    // Load table converting IP into ClusterHost
    iptable = _iptable;
    iptableReady = true;
    socket.emit('req cluster geo', {});
});
socket.on('cluster geo', function(_clusterGeo) {
    // Load cluster geometoric info
    clusterGeo = _clusterGeo;
    clusterGeoReady = true;
    socket.emit('req md info init', {});
});
socket.on('md info init', function(initMdInfo) {
    // Get the initial file distribution
    mdInfo = initMdInfo;
    readyToReqNewMdInfo = true;
    readyToInitFileList = true;
});



// Polling MD info to server
var pollingToServer = setInterval(function() {
    debugPerSec();

    if (readyToReqNewMdInfo == true) {
        readyToReqNewMdInfo = false;
        socket.emit('req md info', { sessionId: socket.socket.transport.sessid });
        socket.emit('req repl conn', { sessionId: socket.socket.transport.sessid });
    }
}, 1000);
socket.on('md info', function(newMdInfo) {
    var newMvmnt = getNewMvmnt(newMdInfo, mdInfo);
    if (newMvmnt.length > 0) {
        mvmntReqQ = mvmntReqQ.concat(newMvmnt);
    }
    mdInfo = newMdInfo;
    readyToReqNewMdInfo = true;
});
socket.on('repl conn', function(_replConn) {
    if (_replConn != null && _replConn != undefined && _replConn.length > 0) {
        replConn = _replConn;
    }
});

</script>

<canvas  data-processing-sources="/processing/dddfs_vis.pjs"></canvas>
<div id="receiveMsg"></div>
