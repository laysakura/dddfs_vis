<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/processing-1.3.6.min.js"></script>
<script src="/javascripts/metadata.client.js"></script>
<script type="text/javascript">
var socket = io.connect('http://localhost:11111');
socket.on('connect', function(msg) {
  console.log("connet");
  document.getElementById("connectId").innerHTML = 
    "あなたの接続ID::" + socket.socket.transport.sessid;
  document.getElementById("type").innerHTML = 
    "接続方式::" + socket.socket.transport.name;
});

// ----------------------
// Utility functions
var getNewMvmnt = function(newMdInfo, mdInfo) {
    var newMvmnt = [];

    // TODO: Compare the length of mdInfo and newMdInfo
    //       It's possible traced files are newly created
    //       or unlinked from metadata completely.

    for (var fileName in mdInfo) {
        var newMdInfoLines = newMdInfo[fileName].split('\n');
        var mdInfoLines = mdInfo[fileName].split('\n');

        // When need to remove (from 1 data node).
        // It is when lines in the mdInfo[fileName] are deleted



        // When need to make replication.
        // It is when lines in the mdInfo[fileName] are inserted
        if (newMdInfoLines.length > mdInfoLines.length) {
            newMdInfoLines.map(function(newMdInfoLine) {
                var isNewMdInfoLineContained = false;
                for (var i = 0; i < mdInfoLines.length; i++) {
                    if (newMdInfoLine == mdInfoLines[i]) {
                        isNewMdInfoLineContained = true;
                    }
                }
                if (isNewMdInfoLineContained == false) {
                    var replMdInfoHash = mdInfoLine2mdInfoHash(newMdInfoLine);
                    if (replMdInfoHash != undefined) {
                        var replSrcIp = replMdInfoHash['replSrcIp'];
                        var replDestIp = replMdInfoHash['ip'];
                        newMvmnt.push(
                            {action: 'repl', name: fileName,
                             srcCluster: iptable[replSrcIp]['cluster'],
                             srcLocalId: iptable[replSrcIp]['localId'],
                             destCluster: iptable[replDestIp]['cluster'],
                             destLocalId: iptable[replDestIp]['localId'],
                            }
                        );
                    }
                }
            });
        }
    }
    return newMvmnt;
};


// Start-up
var log = function() {};
var readyToInitFileList = false;
var readyToReqNewMdInfo = false;
var iptable = {};
var clusterGeo = {};
var mdInfo = {};
var mvmntReqQ = [];
window.onload = function() {
    // Define log() function
    log = function() {
        console.log(arguments);
        document.getElementById("receiveMsg").innerHTML+=arguments[0]+"<br />";
    };

    // Send inital message to the server
    // The order must be:
    // 1. iptable
    // 2. cluster geo
    // 3. md info init
    socket.emit('req iptable', {});
}
socket.on('iptable', function(_iptable) {
    // Load table converting IP into ClusterHost
    iptable = _iptable;
    socket.emit('req cluster geo', {});
});
socket.on('cluster geo', function(_clusterGeo) {
    // Load cluster geometoric info
    clusterGeo = _clusterGeo;
    socket.emit('req md info init', {});
});
socket.on('md info init', function(initMdInfo) {
    // Get the initial file distribution
    mdInfo = initMdInfo;
    readyToReqNewMdInfo = true;
    readyToInitFileList = true;
});



// Polling MD info to server
var pollingToServer = setInterval(function() {
    if (readyToReqNewMdInfo == true) {
        readyToReqNewMdInfo = false;
        socket.emit('req md info', { sessionId: socket.socket.transport.sessid });
    }
}, 1000);
socket.on('md info', function(newMdInfo) {
    var newMvmnt = getNewMvmnt(newMdInfo, mdInfo);
    if (newMvmnt.length > 0) {
        mvmntReqQ = mvmntReqQ.concat(newMvmnt);
    }
    mdInfo = newMdInfo;

    // log('--------------------------------------');
    // for (var fileName in newMdInfo) {
    //     log('[Contents of ' + fileName + ']');
    //     mdInfo[fileName].split('\n').map(function(mdInfoLine) {
    //         var mdInfoHash = mdInfoLine2mdInfoHash(mdInfoLine);
    //         if (mdInfoHash != undefined) {
    //             var ip = mdInfoHash.ip;
    //             log(ip + ' = ' + iptable[ip]['cluster'] + iptable[ip]['localId']);
    //         }
    //     });

    //     // log(newMdInfo[fileName]);
    //     log('');
    // }


    readyToReqNewMdInfo = true;
});

</script>

<div id="connectId"></div>
<div id="type"></div>
<br>
<canvas  data-processing-sources="/processing/dddfs_vis.pjs"></canvas>
<div id="receiveMsg"></div>
